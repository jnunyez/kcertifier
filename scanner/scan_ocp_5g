#!/bin/bash
####################### EXECUTION INSTRUCTIONS ######################
#  1) Download the script in the node with access to ocp objects.
#  2) Check that KUBECONFIG is already initated to the target cluster.
#  3) Execute the script with exactly one argument:
#
#       ./scan_ocp_5g <SSH_ABSOLUTE_KEY_PATH>
#
#	   SSH_ABSOLUTE_KEY_PATH is the absolute private ssh key path
#
#####################################################################
# debugging disabled
set +x
##########################################################################
##########################BASELINE PARAMETERS#############################
BASELINE_OCP="4.8.12"
BASELINE_KERNEL="4.18.0-305.19.1.el8_4.x86_64"
BASELINE_BIOS="1.1a.N1"
BASELINE_BMC="9.1"
BASELINE_FLEXRAN="21.03" #IMAGE
BASELINE_DPDK="20.11.1"
BASELINE_WORKLOAD_DU="vdu-4g-208-new:latest"
BASELINE_WORKLOAD_TIMING="timingmgr-4g-26"
BASELINE_WORKLOAD_CU="TBA"
#BASELINE_E800="3.00 0x800074f5 20.5.4"
BASELINE_E800="3.00"
#Intel card and Dell card for E810 get the first field match 3.00 should be enough but log the whole firmware version
#BASELINE_E700="8.30 0x8000b31a 1.2926.0"
BASELINE_E700="8.30"
BASELINE_SRIOV_OPERATOR="4.8.0-202110121407"
BASELINE_FEC_OPERATOR="2.0.1" # Check version of operator
###########################DUMP LOGS######################################
LOGS=0
##########################################################################
##########################################################################
# log_ocp_get_status
# --------------------------
# Checks OCP_VERSION and SRIOV OPERATOR. Returns status of ocp objects
function log_ocp_get_status() {
	local BASELINE_OCP=$1
	local BASELINE_SRIOV_OPERATOR=$2
	local BASELINE_FEC_OPERATOR=$3
	local BASELINE_WORKLOAD_DU=$4
	local BASELINE_WORKLOAD_TIMING=$5
	local LOGS=$6

	OCP_VERSION=`oc get clusterversions.config.openshift.io | grep version | awk '{print $2}'`
	if [ "$OCP_VERSION" != "$BASELINE_OCP" ]; then
			echo "ERROR: Wrong OCP version for Baseline testing: "${OCP_VERSION}
			echo "ERROR: Cluster requires to Install OCP Version"${BASELINE_OCP}
	else
		if [[ "$LOGS" -eq 1 ]]; then
			echo "DEBUG: Extra OCP cluster Log Info"
			oc get all
			oc status
		fi
		echo "INFO: OCP Baseline Version "${OCP_VERSION}
		echo "##################SRIOV-OPERATOR###############"
		SRIOV_OPERATOR=`oc get csv -n openshift-sriov-network-operator | grep sriov-network-operator | awk {'print $1'}`
    		SRIOV_OPERATOR_VERSION=`oc get csv -n openshift-sriov-network-operator $SRIOV_OPERATOR -o jsonpath={.spec.version}`
    		if [ "$SRIOV_OPERATOR_VERSION" != "$BASELINE_SRIOV_OPERATOR" ]; then
			echo "ERROR: Wrong SRIOV OPERATOR VERSION for Baseline testing: "${SRIOV_OPERATOR_VERSION}
			echo "ERROR: Cluster requires the SRIOV_OPERATOR Version: "${BASELINE_SRIOV_OPERATOR}
		else
			echo "INFO: SRIOV Operator Version "${SRIOV_OPERATOR_VERSION}
			echo "####################WORKLOAD VERSIONS###############"
			if [[ "$LOGS" -eq 1 ]]; then
				echo "DEBUG: dump pod mapped to artifact versions:"
				oc get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' | grep 4glte | tr -d ','
			fi
			WORKLOAD_VERSIONS=`oc get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' | grep 4glte | cut -f 2 | tr -d ','`
			for WORKLOAD_VERSION in $WORKLOAD_VERSIONS
			do
				if [[ ("$WORKLOAD_VERSION" == *"$BASELINE_WORKLOAD_TIMING") || ("$WORKLOAD_VERSION" == *"$BASELINE_WORKLOAD_DU") ]]; then
					echo "DEBUG: Correct ${WORKLOAD_VERSION} for baseline testing"
				else
					echo "ERROR: Wrong Workload version for Baseline testing: "${WORKLOAD_VERSION}
					echo "ERROR: Cluster requires the SRIOV_OPERATOR Version: ${BASELINE_WORKLOAD_DU} and ${BASELINE_WORKLOAD_TIMING}"
				fi
			done
			echo "#####################FEC ACCELERATOR##########"
			FEC_OPERATOR=`oc get csv -n vran-acceleration-operators | grep sriov-fec | awk {'print $1'}`
			FEC_OPERATOR_VERSION=`oc get csv -n vran-acceleration-operators $FEC_OPERATOR -o jsonpath={.spec.version}`
			if [ "$FEC_OPERATOR_VERSION" != "$BASELINE_FEC_OPERATOR" ]; then
				echo "ERROR: Wrong SRIOV OPERATOR VERSION for Baseline testing: "${FEC_OPERATOR_VERSION}
				echo "ERROR: Cluster requires the SRIOV_OPERATOR Version: "${BASELINE_FEC_OPERATOR}
			else
				echo "INFO: FEC Acceleration Operator Version "${FEC_OPERATOR_VERSION}
			fi
			if [[ "$LOGS" -eq 1 ]]; then
				echo "DEBUG: Extra SRIOV Log Info"
				oc get csv  -n openshift-sriov-network-operator >> $LOGFILE
			fi
		fi
	fi
}

# log_get_accessible_ip
# --------------------------
# Given the name of a node reuturns its IP address that is accessible.
function log_ocp_get_accessible_ip() {
  local NODE_NAME="${1}"
  NODE_IP=$(oc get nodes -o wide | grep $NODE_NAME | awk -F' ' '{print $6}')
}

# log_ocp_get_names
# -----------------------------
# Returns the names of the nodes
function log_ocp_get_names() {
  oc get nodes --no-headers -o custom-columns=NAME:.metadata.name
}

# log_node_resources
# --------------------------
# Returns BIOS, Network, kernel logs, memory, and compute info of a node
function log_node_resources() {
	BASELINE_E700=$1
	BASELINE_E800=$2
	BASELINE_BIOS=$3
	BASELINE_BMC=$4
	BASELINE_KERNEL=$5
	LOGS=$6

	#intel salem channel
	#add vars
	#sts
	BASELINE_STS2="3.02"

	echo "#############BIOS######################"
	if [ -d "/sys/devices/virtual/dmi" ]; then
		BIOS_VERSION=$(cat /sys/devices/virtual/dmi/id/bios_version)
		if [[ "$BIOS_VERSION" != "$BASELINE_BIOS" ]]; then
			echo "ERROR: BIOS VERSION: ${BIOS_VERSION} BASELINE BIOS Version: ${BASELINE_BIOS}"
		fi
		BIOS_VERSION=$(cat /sys/devices/virtual/dmi/id/bios_version)
		BOARD_VENDOR=$(cat /sys/devices/virtual/dmi/id/board_vendor)
		PRODUCT_NAME=$(cat /sys/devices/virtual/dmi/id/product_name)
		echo "VERSION: $BIOS_VERSION"
		echo "VENDOR: $BOARD_VENDOR"
		echo "PRODUCT: $PRODUCT_NAME"
	else
	  echo "INFO: BIOS model not supported"
	fi
	echo "##############BMC###################"
	if [ -d "/sys/class/ipmi/ipmi0" ]; then
		BMC_VERSION=$(cat /sys/class/ipmi/ipmi0/device/bmc/firmware_revision)
		if [[ "$BMC_VERSION" != "$BASELINE_BMC" ]]; then
			echo "ERROR: BMC Version: ${BMC_VERSION} BASELINE BMC Version: ${BASELINE_BMC}"
		else
			echo "VERSION: "$BMC_VERSION
		fi
  	else
  		echo "INFO: BMC model not supported"
  	fi
	echo "###########################NETWORK RESOURCES####################"
	echo "########################### NICS ##############################"
 	for ETH in $(find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | sort); do
		DRIVER=$(ethtool -i $ETH | grep -i "driver" | cut --complement -d " " -f 1)
		if [ "$DRIVER" = "ice" ] || [ "$DRIVER" = "i40e" ]; then
      			echo '#########################'$ETH'#############################'
      			NIC_FIRMWARE_VERSION_FULL=$(ethtool -i $ETH | grep -i "firmware-version" | cut --complement -d " " -f 1)
			NIC_FIRMWARE_VERSION=$(ethtool -i $ETH | grep -i "firmware-version" | cut --complement -d " " -f 1 | cut -d " " -f 1)
      			echo "INFO: Driver: "$DRIVER
			echo "firmware-version: "$NIC_FIRMWARE_VERSION_FULL
      			# Check FVL firmware
			if  [[ ( "$DRIVER" == "i40e" ) && ("$NIC_FIRMWARE_VERSION" != "$BASELINE_E700") ]]; then
				echo "ERROR: Baseline FVL: "$DRIVER"  NIC_FIRMWARE_VERSION: "$NIC_FIRMWARE_VERSION" BASELINE: "$BASELINE_E700
				echo "ERROR: Baseline FVL i40e driver for e710 with wrong firmware version"
			fi
      			# Check CVL and STS2 got proper FW Version
			BUS_PCI=$(ethtool -i $ETH | grep -i "bus-info" | cut -d " " -f 2)
			echo "$(lspci -vnns $BUS_PCI | head -2)"
			if [[ ("$DRIVER" == "ice") ]]; then
				SUB_DEVICE_ID=`cat /sys/bus/pci/devices/${BUS_PCI}/subsystem_device`
				DEVICE_ID=`cat /sys/bus/pci/devices/${BUS_PCI}/device`
				# Silicom STS2 Baseline
				BASELINE_SILICOM_DEVICE_ID="0x1591"
				BASELINE_SILICOM_SUBDEV_ID="0x02d8"
				if [[ ( ("$DEVICE_ID" == "$BASELINE_SILICOM_DEVICE_ID") && ("$BASELINE_SILICOM_SUBDEV_ID" == "$SUB_DEVICE_ID") ) && ("$NIC_FIRMWARE_VERSION" != "$BASELINE_STS2") ]]; then
					echo "ERROR: STS2 Baseline NIC_FIRMWARE_VERSION: "$NIC_FIRMWARE_VERSION" BASELINE: "$BASELINE_STS2
					echo "ERROR: Silicom with wrong firmware version"
			  	fi
			  	# Intel E810-XXV and E810-C
				if [[ ( ("$DEVICE_ID" == "0x159b") || ("0x1593" == "$DEVICE_ID") ) && ("$NIC_FIRMWARE_VERSION" != "$BASELINE_E800") ]]; then
					echo "ERROR: Intel Baseline CVL "$DRIVER"  NIC_FIRMWARE_VERSION: "$NIC_FIRMWARE_VERSION" BASELINE: "$BASELINE_E800
					echo "ERROR: Intel CVL with wrong firmware version"
				fi
			fi

			echo $ETH' : SRIOV enabled? '
			TOTALVFS_PATH="/sys/class/net/${ETH}/device/sriov_totalvfs"
	 		if [[ -e "$TOTALVFS_PATH" ]]; then
				echo $ETH' :SR-IOV enabled  '
				TOTALVFS=$(cat /proc/sys/kernel/panic_on_rcu_stall)
				NUMVFS=$(cat /sys/class/net/${ETH}/device/sriov_numvfs)
				echo $ETH' : total VFs '$TOTALVFS
				echo $ETH' : created VFs '$NUMVFS
	 		else
				echo $ETH' :SR-IOV not enabled'
	 		fi
		fi
 	done
	echo "####################### END NICS #####################"
	echo "################ ACCELERATION CARDS ##################"
 	echo "INFO: FEC Acceleration card enabled?"
        if [[ $(lspci | grep accel) ]]; then
    		lspci -vvv | grep accel
  	else
  		echo "INFO: no FEC Acceleration card found"
  	fi
 	echo "########################END NETWORK RESOURCES##############"

  	echo "############CPU RESOURCES ##########"
	echo "INFO: Number of CPUs and NUMA Topology###"
  	lscpu | grep -i numa
	echo "INFO: Thread Siblings###"
  	lscpu -e
  	echo "############ END CPU RESOURCES ##########"

 	echo "#######MEMORY RESOURCES######################"
  	cat /proc/meminfo | grep MemTotal
  	echo "############ END MEMORY RESOURCES ##########"
 	echo "########### KERNEL VERSION ###########"
  	uname -a
	#commented since BASELINE_KERNEL is unknown
 	#if [[ "$(uname -r)" != "$BASELINE_KERNEL" ]]; then	
		#echo "ERROR Kernel Version: $(uname -r) differs from Baseline Kernel: "$BASELINE_KERNEL
 	#fi
  	echo "########### END KERNEL VERSION ###########"
 	echo "############ KERNEL DUMP #################"
 	if [[ "$(systemctl is-active kdump.service)" == "active" ]]; then
    		if [[ -d /var/crash ]]; then
	    		if [[ $(cat /proc/sys/kernel/panic_on_rcu_stall) -ne 1 ]]; then
				echo "ERROR Kdump: panic_on_rcu_stall disabled"
			else
				echo "KDUMP Service properly enabled"
	  		fi
	  	else
  			echo "ERROR: Kdump default path for vmcore does not exist"
	  	fi
	else
 		echo "ERROR: Kdump service not active"
	fi
 	echo "###########END KERNEL DUMP################"
	if [[ "$LOGS" -eq 1 ]]; then
		echo "###########KERNEL PANICS###################"
		for PANIC in $(find /proc/sys/kernel | grep panic );  do echo $PANIC $(cat $PANIC); done
 		echo "########KERNEL-LOGS SINCE LAST BOOT########"
 		journalctl -b -1
 	fi
}
##########################################################################
###############################MAIN#######################################
##########################################################################

if [ -z "$1" ]; then
	echo "ERR: No ssh key supplied as argument"
	exit
fi

SSH_KEY_FULL_PATH=$1
LOGFILE=./controller-$(date +"%Y_%m_%d_%I_%M_%p").log
echo "INFO: gather OCP logs" >> $LOGFILE

echo "##################OCP-BASICS###############" >> $LOGFILE
log_ocp_get_status $BASELINE_OCP $BASELINE_SRIOV_OPERATOR $BASELINE_FEC_OPERATOR $BASELINE_WORKLOAD_DU $BASELINE_WORKLOAD_TIMING $LOG >> $LOGFILE

# for all nodes
while read -r NODE_NAME; do
	LOGFILE=./${NODE_NAME}-$(date +"%Y_%m_%d_%I_%M_%p").log
	echo "INFO: Gather Node ${NODE_NAME} logs" >> $LOGFILE
  	NODE_IP=`oc get nodes -o wide | grep ${NODE_NAME} | awk -F' ' '{print $6}'`
	ssh -n -o ConnectTimeout=1 -o StrictHostKeyChecking=no -i ${SSH_KEY_FULL_PATH} core@${NODE_IP} "$(typeset -f); log_node_resources '${BASELINE_E700}' '${BASELINE_E800}' '${BASELINE_BIOS}' '${BASELINE_BMC}' '${BASELINE_KERNEL}' '${LOGS}'" >> $LOGFILE
done < <(log_ocp_get_names)
